import React from 'react';

type ToastTypes = 'normal' | 'action' | 'success' | 'error' | 'loading';
type PromiseT = Promise<any> | (() => Promise<any>);
type PromiseData = ExternalToast & {
    loading: string | React.ReactNode;
    success: string | React.ReactNode | ((data: any) => React.ReactNode | string);
    error: string | React.ReactNode | ((error: any) => React.ReactNode | string);
};
interface ToastT {
    id: number;
    title?: string | React.ReactNode;
    type?: ToastTypes;
    icon?: React.ReactNode;
    jsx?: React.ReactNode;
    invert?: boolean;
    description?: string;
    duration?: number;
    delete?: boolean;
    important?: boolean;
    action?: {
        label: string;
        onClick: () => void;
    };
    cancel?: {
        label: string;
        onClick?: () => void;
    };
    promise?: PromiseT;
    style?: React.CSSProperties;
    className?: string;
    descriptionClassName?: string;
}
type Position = 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right' | 'top-center' | 'bottom-center';
interface ToastOptions {
    className?: string;
    descriptionClassName?: string;
    style?: React.CSSProperties;
}
interface ToasterProps {
    invert?: boolean;
    theme?: 'light' | 'dark';
    position?: Position;
    hotkey?: string[];
    richColors?: boolean;
    expand?: boolean;
    duration?: number;
    visibleToasts?: number;
    closeButton?: boolean;
    toastOptions?: ToastOptions;
    className?: string;
    style?: React.CSSProperties;
    offset?: string | number;
}
type ExternalToast = Omit<ToastT, 'id' | 'type' | 'title'>;

declare const toast: ((message: string | React.ReactNode, data?: ExternalToast) => number) & {
    success: (message: string | React.ReactNode, data?: ExternalToast) => number;
    error: (message: string | React.ReactNode, data?: ExternalToast) => number;
    custom: (jsx: (id: number) => React.ReactElement, data?: ExternalToast) => void;
    message: (message: string | React.ReactNode, data?: ExternalToast) => number;
    promise: (promise: PromiseT, data?: PromiseData) => number;
    dismiss: (id?: number) => number;
};

declare const Toaster: (props: ToasterProps) => JSX.Element;

export { ExternalToast, ToastT, Toaster, toast };
